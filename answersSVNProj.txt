Question #1 "What are the differences between git and svn?"
Answer 
Git is a distributed VCS and SVN(subversion) is a centralized VCS
Git uses a peer-to-peer approach and holds a copy of the entire repository on the local machine whereas
svn uses a server/client approach and only stores a copy of the repository files (located on a server) in a working copy(directory) on the client(local machine). There are other differences as well. 

Question #2 "How are commits handled in svn?"
Answer
the commit sends all changes made to files in the working copy on local machine to repository which is on the server

Question #3 "How are check outs performed in svn?"
Answer
My example I used this -->$ svn checkout https://github.com/phdengel/svnProg.git

Question #4 "How do you create the local working environment with svn (the .svn direc-
tory)?"
Answer
-> run svn import command to upload your directory/files to repository. # this places local files in respository and begin tracking changes under svn control.
-> run svn checkout # this gets you the working copy of repository files to start dev work on local machine changes now tracked by svn

Question #5 "How do you add files to the repository?"
Answer
After creating file in Working Copy(WC) -> run svn add <name of file> which only schedules file to be added torepository (this changes the ? to A in front of file when svn status is run)
Once add is completed -> run svn commit <name of file> -m "log message" (log message using -m switch) which commits file to repository.

Question #6 "How are branches handled in svn?"
Answer
a branch is a segregated copy of a project tree (ex: trunk/svnptroj)
Copying this directory should be completed on the server, this is a constant-time operation, and it's
the way most people create branches. 
You now can checkout a new working copy to begin working with it.

Question #7 "How many branches can you have at any given time?"
Answer
Unlimited number of branches are allowed

Question #8 "What does your local copy of a repository look like with svn?"
Answer
It looks like any other directory structure on a local machine; full of files and subdirectories, etc.

Question #9 "How do you check the status of the les you are presently working on?"
svn status

Question #10 "How long are branches in svn supposed to exist?"
Answer
branches last until deleted; they will still be seen in earlier revisions when using svn checkout, svn switch or svn list.

Question #11 "How do you merge branches?"
Answer
using various invocations of the svn merge subcommand for example svn merge<URL>

Question #12 "Why was svn created?"
Answer
As a replacement for CVS <Concurrent Versions System>

Question #13 "What is a typical svn work flow?"
Answer
1) Update your working copy;
2) Make your changes to your file(s);
3) Review your changes; 
4) Fix your mistakes;
5) Resolve any conflicts (merge others' changes);
6) Publish (commit) your changes; repeat Step 1;

Question #14 "What was the design criteria for svn?"
Answer
write a new version control system from scratch;but the developers didn't want to break new ground in version control methodology, they just wanted to fix CVS. They decided that Subversion would match CVS's features and preserve the same development model, but not duplicate CVS's most obvious flaws. 

Question #15 "How do we view the past of a project with svn?"
Answer
Several commands can provide you with historical data from the repository: svn diff; svn log; svn cat; 
svn annotate; svn list

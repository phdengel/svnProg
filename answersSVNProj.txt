Question #1 "What are the differences between git and svn?"
Answer 
Git is a distributed VCS and SVN(subversion) is a centralized VCS
Git uses a peer-to-peer approach and holds a copy of the entire repository on the local machine whereas
svn uses a server/client approach and only stores a copy of the repository files (located on a server) in a working copy(directory) on the client(local machine). There are other differences as well. 

Question #2 "How are commits handled in svn?"
Answer
the commit sends all changes made to files in the working copy on local machine to repository which is on the server

Question #3 "How are check outs performed in svn?"
Answer
My example I used this -->$ svn checkout https://github.com/phdengel/svnProg.git

Question #4 "How do you create the local working environment with svn (the .svn direc-
tory)?"
Answer
-> run svn import command to upload your directory/files to repository. # this places local files in respository and begin tracking changes under svn control.
-> run svn checkout # this gets you the working copy of repository files to start dev work on local machine changes now tracked by svn

Question #5 "How do you add files to the repository?"
Answer
After creating file in Working Copy(WC) -> run svn add <name of file> which only schedules file to be added torepository (this changes the ? to A in front of file when svn status is run)
Once add is completed -> run svn commit <name of file> -m "log message" (log message using -m switch) which commits file to repository.

Question #6 "How are branches handled in svn?"
Answer
a branch is a segregated copy of a project tree (ex: trunk/svnptroj)
Copying this directory should be completed on the server, this is a constant-time operation, and it's
the way most people create branches. 
You now can checkout a new working copy to begin working with it.

Question #7 "How many branches can you have at any given time?"
Answer
Unlimited number of branches are allowed

Question #8 "What does your local copy of a repository look like with svn?"
Answer
It looks like any other directory structure on a local machine; full of files and subdirectories, etc.

Question #9 "How do you check the status of the les you are presently working on?"
svn status

Question #10 "How long are branches in svn supposed to exist?"
Answer
branches last until deleted; they will still be seen in earlier revisions when using svn checkout, svn switch or svn list.

Question #11 "How do you merge branches?"
Answer
using various invocations of the svn merge subcommand for example svn merge<URL>

Question #12 "Why was svn created?"
Answer
As a replacement for CVS <Concurrent Versions System>

Question #13 "What is a typical svn work flow?"
Answer
1) Update your working copy;
2) Make your changes to your file(s);
3) Review your changes; 
4) Fix your mistakes;
5) Resolve any conflicts (merge others' changes);
6) Publish (commit) your changes; repeat Step 1;

Question #14 "What was the design criteria for svn?"
Answer
write a new version control system from scratch;but the developers didn't want to break new ground in version control methodology, they just wanted to fix CVS. They decided that Subversion would match CVS's features and preserve the same development model, but not duplicate CVS's most obvious flaws. 

Question #15 "How do we view the past of a project with svn?"
Answer
Several commands can provide you with historical data from the repository: svn diff; svn log; svn cat; 
svn annotate; svn list

Question #16 "If there was a mistake made in the past of a project, how should we go about
correcting that mistake in svn?"
Answer
Basically you need to "merge backwards";
So for example to go from revision 150 (current) back to revision 140:
svn update
svn merge -r 150:140 .
svn commit -m "Rolled back to r140"

Question #17 "If you have an existing project and want to start tracking it with svn, how
do you copy your existing files to the repository the first time? Does this
create the .svn directory in your local folder?"
Answer
short answer-- you run svn add <fileName> or svn import then svn commit with args;
better example from the red-bean book:
"The svn import command is a quick way to copy an unversioned tree of files into a repository, creating intermediate directories as necessary. svn import doesn't require a working copy, and your files are immediately committed to the repository. You typically use this when you have an existing tree of files that you want to begin tracking in your Subversion repository."
 For example:
$ svn import /path/to/mytree \
             http://svn.example.com/svn/repo/some/project \
             -m "Initial import"
Adding         mytree/foo.c
Adding         mytree/bar.c
Adding         mytree/subdir
Adding         mytree/subdir/quux.h
Committed revision 1.
This still leaves files on local directory that you just imported into repository is still unversioned.
To begin working on that data in a versioned fashion, you still need to create a fresh working copy of 
that tree. that is accomplished by running svn co (checkout) to get a workingCopy which then creates .svn for the workingCopy directory (local repository)

Question #18 "Can the client/server setup required with svn exist on the same computer?"
Answer
YES, after subversion is installed on a machine, that machine becomes the client and it also becomes the 
server when the repository is created and stored on that machine.
The repository makes the machine a server, and the server is where the repository is stored even 
if they are on the same machine, both the client and the server.

Question #19 "Did SVN provide any difference in tools between how you do server side
commands and client side commands?"
Answer
YES; std. svn commands on client side for example; svn add; svn commit; on the server side, svnadmin is the administrative tool for monitoring and repairing your Subversion repository. Since svnadmin works via direct repository access (and thus can only be used on the machine that holds the repository), it refers to the repository with a path, not a URL. It has a vast number of options.
